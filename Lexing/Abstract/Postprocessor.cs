namespace Chi.Lexing.Abstract
{
    /// <summary>
    /// Represents an abstract postprocessor, that is, a class that processes 
    /// a list of tokens after they have been generated by a lexer.
    /// </summary>
    /// <typeparam name="L">The language description type.</typeparam>
    /// <typeparam name="T">The token type.</typeparam>
    /// <typeparam name="Y">The enumeration representing a token type.</typeparam>
    public abstract class Postprocessor<L, T, Y> 
        where L : ILanguage<T, Y> 
        where T : IToken<Y>
        where Y : struct, Enum
    {
        /// <summary>
        /// Gets the language description type associated with the postprocessor.
        /// </summary>
        public readonly L Language;

        /// <summary>
        /// Gets the source code to be processed.
        /// </summary>
        protected readonly string Source;

        /// <summary>
        /// Initializes a new instance of the <see cref="Postprocessor{L, T}"/> class.
        /// </summary>
        /// <param name="language">The language description type associated with the postprocessor.</param>
        /// <param name="source">The source code to be processed.</param>
        public Postprocessor(L language, string source)
        {
            Language = language;
            Source = source;
        }

        /// <summary>
        /// Runs the postprocessor on the given list of tokens.
        /// </summary>
        /// <param name="tokens">The list of tokens to be processed.</param>
        /// <returns>The processed list of tokens.</returns>
        public abstract IList<T> Run(IList<T> tokens);

        /// <summary>
        /// Cleans the given list of tokens by removing whitespace and comments.
        /// </summary>
        /// <param name="tokens">The list of tokens to be cleaned.</param>
        /// <returns>The cleaned list of tokens.</returns>
        public IList<T> Clean(IList<T> tokens) => tokens
            .Where(t => !Language.IsWhitespace(t.Type))
            .Where(t => !Language.IsComment(t.Type))
            .ToList();
    }
}
