
# Math.chi :: Mathematical functions implemented in Chi.
# Warning: most of these functions are generated by Github Copilot.

# Absolute value.

	def abs(x) =>
		if lt(x, 0) then -(x)
		else x;

# Sign.

	def sign(x) =>
		if lt(x, 0) then -1
		else if gt(x, 0) then 1
		else 0;

# Min value.

	def min(a, b) =>
		if lt(a, b) then a
		else b;

# Max value.

	def max(a, b) =>
		if lt(a, b) then b
		else a;

# Clamp.

	def clamp(x, a, b) =>
		if gt(x, b) then b
		else if lt(x, a) then a
		else x;

# Fractional part.

	def fractional(x) =>
		mod(x, 1);

# Integral part.

	def integral(x) =>
		-(x, fractional(x));

# Zero check.

	def is-zero(x) =>
		eq(x, 0);

# Not-zero check.

	def is-not-zero(x) =>
		neq(x, 0);

# Positive check.

	def is-positive(x) =>
		gt(x, 0);

# Negative check.

	def is-negative(x) =>
		lt(x, 0);

# Fractional check.

	def is-fractional(x) =>
		is-not-zero(fractional(x));

# Integer check.

	def is-integer(x) =>
		is-zero(fractional(x));

# Even check.

	def is-even(x) =>
		is-zero(mod(x, 2));

# Odd check.

	def is-odd(x) =>
		is-not-zero(mod(x, 2));

# Floor.

	def floor(x) =>
		if is-positive(x) then -(x, fractional(x))
		else -(-(x, fractional(x)), 1);

# Ceiling.

	def ceil(x) =>
		if is-positive(x) then +(-(x, fractional(x)), 1)
		else -(x, fractional(x));

# Round.

	def round(x) =>
		if gte(fractional(x), 0.5) then ceil(x)
		else floor(x);

# Average.

	def average(a, b) =>
		div(+(a, b), 2);

# Power.

	def power(a, b) =>
		if is-zero(b) then 1
		else mul(a, power(a, --(b)));

# Square.

	def square(x) =>
		mul(x, x);

	def square2(x) =>
		power(x, 2);

# Cube.

	def cube(x) =>
		mul(mul(x, x), x);

	def cube2(a) =>
		power(x, 3);

# Exponential.

	def exp(x) =>
		power(2.71828, x);

# Greatest common divisor.

	def gcd(a, b) =>
		if is-zero(b) then a
		else gcd(b, mod(a, b));

# Least common multiple.

	def lcm(a, b) =>
		div(mul(a, b), gcd(a, b));

# Factorial.

	def factorial(n) =>
		if is-fractional(n) then nil
		else if is-negative(n) then nil
		else pvt-factorial(1, n);

	def pvt-factorial(a, b) =>
		if is-zero(b) then a
		else pvt-factorial(mul(a, b), --(b));

# Fibonacci.

	def fibonacci(n) =>
		if is-fractional(n) then nil
		else if is-negative(n) then nil
		else pvt-fibonacci(0, 1, n);

	def pvt-fibonacci(a, b, n) =>
		if is-zero(n) then a
		else pvt-fibonacci(b, +(a, b), --(n));
